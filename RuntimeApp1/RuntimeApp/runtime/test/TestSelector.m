//
//  TestSelector.m
//  RuntimeApp
//
//  Created by hour on 2018/7/4.
//  Copyright © 2018年 hour. All rights reserved.
//

#import "TestSelector.h"
#import <objc/runtime.h>
#import <objc/message.h>

/**
 typedef struct objc_selector *SEL; // 一个方法的selector
 
 Method selectors are used to represent the name of a method at runtime.
 A method selector is a C string that has been registered (or “mapped“) with the Objective-C runtime.
 Selectors generated by the compiler are automatically mapped by the runtime when the class is loaded.
 

 sel_getName(SEL) -> cosnt char *
 sel_registerName(const char *) -> SEL
 sel_getUid(const char *) -> SEL // 与z sel_registerName等价
 sel_isEqual(SEL, SEL) -> BOOL
 
 */
@implementation TestSelector

+ (void)test {
    // 编译器可以检查
    SEL s1 = @selector(hello2:);
    const char selName = sel_getName(s1);
    sel_getUid(selName);
    
    SEL s2 = NSSelectorFromString(@"hello");
    
    // map the method name to a selector
    SEL s3 = sel_registerName("hello:");
    
    
    //    NSString *name2 = [qdObj valueForKey:@"name"];
    
    SEL s4 = @selector(hello:name:);
    BOOL flag = [self respondsToSelector:s4];
    BOOL flag2 = [[self class] respondsToSelector:s4];
    
//    objc_msgSend(@selector(hello), self);
//    objc_msgSend(self, @selector(hello));
//    [self performSelector:s5];
    
    SEL s5 = sel_registerName("hello5");
    class_addMethod([self class], s5, (IMP)hello5, "v@:");
    [self performSelector:s5];
    
    NSLog(@"");
}

- (void)hello {
    NSLog(@"hello");
}

- (void)hello:(NSString *)name {
    NSLog(@"hello name");
}

+ (void)hello:(int)name name:(NSString *)n{
    NSLog(@"");
}



- (void)hello2:(NSString *)name {
    NSLog(@"hello2");
}

#pragma mark - c func
void hello5() {
    NSLog(@"=== hello5 ===");
}

@end
